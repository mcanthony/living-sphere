{
  "name": "browserify-shader",
  "version": "0.1.0",
  "description": "Super simple WebGL shader loader plugin for browserify",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mere/browserify-shader.git"
  },
  "keywords": [
    "shader",
    "webgl",
    "vertex",
    "fragment",
    "browserify",
    "transform"
  ],
  "author": {
    "name": "Zoltan Bourne"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mere/browserify-shader/issues"
  },
  "homepage": "https://github.com/mere/browserify-shader",
  "devDependencies": {
    "mocha": "~1.18.2",
    "chai": "~1.9.1"
  },
  "dependencies": {
    "through": "~2.3.4"
  },
  "readme": "browserify-shader [![Build Status](https://travis-ci.org/mere/browserify-shader.svg)](https://travis-ci.org/mere/browserify-shader)\r\n=================\r\nsuper simple browserify transform for loading webgl shaders\r\n\r\n\r\n### Installation:\r\n\r\n`npm install browserify-shader --save`\r\n<br />[![NPM](https://nodei.co/npm/browserify-shader.png?mini=true)](https://nodei.co/npm/browserify-shader/)\r\n\r\n### Usage:\r\n\r\nSimply use `require()` to load your shader files:\r\n\r\n```javascript\r\nvar vs = require('./vertex.c');\r\nvar fs = require('./fragment.c');\r\n```\r\n\r\n#### WebGL API example:\r\n```javascript\r\nvar vs = require('./vertex.c');\r\nvar fs = require('./fragment.c');\r\n\r\nvar shader = gl.createShader(gl.VERTEX_SHADER)\r\ngl.shaderSource(shader, vs()); \r\ngl.compileShader(shader);\r\ngl.attachShader(yourWebGLProg, shader);\r\n```\r\n\r\n#### THREE.js example:\r\n```javascript\r\nvar vs = require('./vertex.c');\r\nvar fs = require('./fragment.c');\r\n\r\nvar myMaterial = new THREE.ShaderMaterial({\r\n        uniforms: uniforms,\r\n        attributes: attributes,\r\n        vertexShader: vs(),\r\n        fragmentShader: fs(),\r\n        transparent: true,\r\n        side: THREE.BackSide\r\n    });\r\n```\r\n\r\n## Parameterised shaders:\r\nYou can add **compile-time** parameters in your shaders.\r\n<br />Simply add `{{foo}}`-style parameters, eg.:\r\n```c\r\nattribute vec3 pos;\r\nvoid main() {\r\n  gl_Position = vec4(pos, {{zoom}});\r\n}\r\n```\r\nThen in your code:\r\n```javascript\r\nvar vs = require('./vertex.c');\r\n...\r\ngl.shaderSource(shader, vs({\r\n    zoom: \"2.0\"\r\n  })); \r\n```\r\nFor runtime parameters, use `uniform`-s in the shader.\r\n\r\n## Extensions\r\nbrowserify-shader recognises the following extensions by default:\r\n```javascript\r\n[\r\n    \"c\"\r\n  , \"glsl\"\r\n  , \"vert\"\r\n  , \"frag\"\r\n  , \"vs\"\r\n  , \"fs\"\r\n  , \"gs\"\r\n  , \"vsh\"\r\n  , \"fsh\"\r\n  , \"gsh\"\r\n  , \"vshader\"\r\n  , \"fshader\"\r\n  , \"gshader\"\r\n];\r\n```\r\nYou can add/delete/modify this list using:\r\n```javascript\r\nrequire(\"browserify-shader\").extensions = [\"vertexshader\", \"fragmentshader\", \"c\"]\r\n```\r\n\r\n## How to run \r\n## Options\r\nThe following options will work if you want to customize your transform:\r\n\r\n- parameterize: Boolean\r\n  - enables parameterised shaders, **Note:** if disabled, modules will be required/imported as strings instead of functions.\r\n- module: String\r\n  - configures module type incase your using an es6 transpiler with browserify, possibilities are \"es6\"/\"es2015\" and \"common\" (default).\r\n  \r\n### CLI:\r\nrun browserify with the transform option:\r\n```bash\r\nbrowserify -t browserify-shader entry-point.js\r\n```\r\n```bash\r\nbrowserify -t [browserify-shader --parameterize=true] entry-point.js\r\n```\r\n\r\n### Node/grunt:\r\nWhen compiling using Javascript code custom extensions can be set:\r\n```javascript\r\nvar browserify = require(\"browserify\");\r\nvar browserifyShader = require(\"browserify-shader\")\r\n\r\nbrowserify(\"./index.js\");\r\n  .transform(browserifyShader, {\r\n     module: \"es6\"\r\n  });\r\n  .bundle()\r\n  .pipe(fs.createWriteStream(\"./bundle.js\"));\r\n```\r\n\r\n### Gulp + Watchify\r\n```javascript\r\nvar gulp = require('gulp')\r\nvar source = require('vinyl-source-stream')\r\n\r\ngulp.task('watch', function() {\r\n  var bundler = watchify('./src/index.js');\r\n  bundler.transform('browserify-shader') \r\n\r\n  bundler.on('update', rebundle)\r\n\r\n  function rebundle () {\r\n    return bundler.bundle()\r\n      .pipe(source('bundle.js'))\r\n      .pipe(gulp.dest('./dist'))\r\n  }\r\n\r\n  return rebundle()\r\n})\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "browserify-shader@0.1.0",
  "dist": {
    "shasum": "7114b65b2640ca01b04dd2561919131c048ed7f0"
  },
  "_from": "browserify-shader@^0.1.0",
  "_resolved": "https://registry.npmjs.org/browserify-shader/-/browserify-shader-0.1.0.tgz"
}
